import { Pool } from 'pg';
import dotenv from 'dotenv';

dotenv.config();

const pool = new Pool({
    user: process.env.DB_USER || 'kb_user',
    host: process.env.DB_HOST || 'localhost',
    database: process.env.DB_NAME || 'knowledge_base',
    password: process.env.DB_PASSWORD || 'your_secure_password',
    port: process.env.DB_PORT || 5432,
});

async function checkDataQuality() {
    let client;
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö...');
        
        client = await pool.connect();
        
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        console.log('\nüìä –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–†–ê–ö–¢–û–í:');
        
        const contractsStats = await client.query(`
            SELECT 
                COUNT(*) as total,
                COUNT(DISTINCT contract_id) as unique_ids,
                COUNT(DISTINCT customer_inn) as unique_customers,
                COUNT(DISTINCT supplier_inn) as unique_suppliers,
                MIN(contract_date) as earliest_contract,
                MAX(contract_date) as latest_contract,
                AVG(contract_amount) as avg_amount,
                SUM(contract_amount) as total_amount
            FROM contracts;
        `);
        
        console.log('   üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        console.log('      –í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:', contractsStats.rows[0].total);
        console.log('      –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID:', contractsStats.rows[0].unique_ids);
        console.log('      –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤:', contractsStats.rows[0].unique_customers);
        console.log('      –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:', contractsStats.rows[0].unique_suppliers);
        console.log('      –ü–µ—Ä–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç:', contractsStats.rows[0].earliest_contract);
        console.log('      –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç:', contractsStats.rows[0].latest_contract);
        console.log('      –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞:', Math.round(contractsStats.rows[0].avg_amount), '—Ä—É–±.');
        console.log('      –û–±—â–∞—è —Å—É–º–º–∞:', Math.round(contractsStats.rows[0].total_amount), '—Ä—É–±.');
        
        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ç–∏—Ä–æ–≤–æ—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        console.log('\nüìä –ê–ù–ê–õ–ò–ó –ö–û–¢–ò–†–û–í–û–ß–ù–´–• –°–ï–°–°–ò–ô:');
        
        const sessionsStats = await client.query(`
            SELECT 
                COUNT(*) as total,
                COUNT(DISTINCT session_id) as unique_ids,
                COUNT(DISTINCT customer_inn) as unique_customers,
                COUNT(DISTINCT supplier_inn) as unique_suppliers,
                MIN(creation_date) as earliest_session,
                MAX(creation_date) as latest_session,
                AVG(session_amount) as avg_amount,
                SUM(session_amount) as total_amount
            FROM quotation_sessions;
        `);
        
        console.log('   üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        console.log('      –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π:', sessionsStats.rows[0].total);
        console.log('      –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID:', sessionsStats.rows[0].unique_ids);
        console.log('      –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤:', sessionsStats.rows[0].unique_customers);
        console.log('      –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:', sessionsStats.rows[0].unique_suppliers);
        console.log('      –ü–µ—Ä–≤–∞—è —Å–µ—Å—Å–∏—è:', sessionsStats.rows[0].earliest_session);
        console.log('      –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è:', sessionsStats.rows[0].latest_session);
        console.log('      –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞:', Math.round(sessionsStats.rows[0].avg_amount), '—Ä—É–±.');
        console.log('      –û–±—â–∞—è —Å—É–º–º–∞:', Math.round(sessionsStats.rows[0].total_amount), '—Ä—É–±.');
        
        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢–´:');
        
        const contractDuplicates = await client.query(`
            SELECT contract_id, COUNT(*) as duplicates
            FROM contracts
            GROUP BY contract_id
            HAVING COUNT(*) > 1;
        `);
        
        console.log('   –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ ID:', contractDuplicates.rows.length);
        
        const sessionDuplicates = await client.query(`
            SELECT session_id, COUNT(*) as duplicates
            FROM quotation_sessions
            GROUP BY session_id
            HAVING COUNT(*) > 1;
        `);
        
        console.log('   –°–µ—Å—Å–∏–∏ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ ID:', sessionDuplicates.rows.length);
        
        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        console.log('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•:');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ NULL –∑–Ω–∞—á–µ–Ω–∏–π
        const nullChecks = [
            { table: 'contracts', column: 'contract_id', nulls: await client.query('SELECT COUNT(*) FROM contracts WHERE contract_id IS NULL') },
            { table: 'contracts', column: 'contract_amount', nulls: await client.query('SELECT COUNT(*) FROM contracts WHERE contract_amount IS NULL') },
            { table: 'quotation_sessions', column: 'session_id', nulls: await client.query('SELECT COUNT(*) FROM quotation_sessions WHERE session_id IS NULL') },
            { table: 'quotation_sessions', column: 'session_amount', nulls: await client.query('SELECT COUNT(*) FROM quotation_sessions WHERE session_amount IS NULL') }
        ];
        
        for (const check of nullChecks) {
            const count = parseInt(check.nulls.rows[0].count);
            if (count > 0) {
                console.log(`   ‚ö†Ô∏è  –í —Ç–∞–±–ª–∏—Ü–µ ${check.table} –≤ –∫–æ–ª–æ–Ω–∫–µ ${check.column}: ${count} NULL –∑–Ω–∞—á–µ–Ω–∏–π`);
            } else {
                console.log(`   ‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ ${check.table} –∫–æ–ª–æ–Ω–∫–∞ ${check.column}: –Ω–µ—Ç NULL –∑–Ω–∞—á–µ–Ω–∏–π`);
            }
        }
        
        // 5. –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        console.log('\nüëÄ –ü–†–ò–ú–ï–†–´ –î–ê–ù–ù–´–• –î–õ–Ø –í–ò–ó–£–ê–õ–¨–ù–û–ô –ü–†–û–í–ï–†–ö–ò:');
        
        console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:');
        const recentContracts = await client.query('SELECT * FROM contracts ORDER BY contract_date DESC LIMIT 3');
        recentContracts.rows.forEach((contract, i) => {
            console.log(`      ${i + 1}. ${contract.contract_name}`);
            console.log(`         ID: ${contract.contract_id}, –°—É–º–º–∞: ${contract.contract_amount} —Ä—É–±.`);
            console.log(`         –ó–∞–∫–∞–∑—á–∏–∫: ${contract.customer_name} (–ò–ù–ù: ${contract.customer_inn})`);
        });
        
        console.log('\n   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∫–æ—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Å–µ—Å—Å–∏–∏:');
        const recentSessions = await client.query('SELECT * FROM quotation_sessions ORDER BY creation_date DESC LIMIT 3');
        recentSessions.rows.forEach((session, i) => {
            console.log(`      ${i + 1}. ${session.session_name}`);
            console.log(`         ID: ${session.session_id}, –°—É–º–º–∞: ${session.session_amount} —Ä—É–±.`);
            console.log(`         –ó–∞–∫–∞–∑—á–∏–∫: ${session.customer_name} (–ò–ù–ù: ${session.customer_inn})`);
        });
        
        console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    } finally {
        if (client) {
            client.release();
        }
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkDataQuality();